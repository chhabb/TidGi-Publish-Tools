created: 20250514215311077
modified: 20250514223641238
tags: 计算机科学/操作系统与虚拟化/Linux/知识体系
title: 计算机科学/操作系统与虚拟化/Linux/知识体系/查看文件内容

在显示文件内容之前，应该先了解文件类型。如果你尝试显示二进制文件，那么屏幕上会出现各种乱码，甚至会把你的终端仿真器挂起。

!! ''file''

file 命令用于判断文件的类型，而不是依赖文件扩展名。它通过读取文件的内容（而不是名称）来判断文件是文本、脚本、二进制程序、图片、压缩包、设备文件等哪一种类型。

* file 文件名
* file 目录：会返回 `目录名: directory`

这个文件可能是：

* 普通文件：file hello.txt，如果没有内容，会返回`hello.txt: empty`；如果有内容，会返回`hello.txt: ASCII text`，file命令不仅能够确定文件中包含的是文本信息，还能确定该文本文件的字符编码是ASCII。
* 符号链接文件：file link_to_hello，如果目标存在，它会返回 `link_to_hello: symbolic link to hello.txt` 指出目标文件；如果目标不存在，它会返回 `target: broken symbolic link to not_exist`。
* 脚本文件：file sayhi.sh，file 会识别是 shell 脚本，并且还指出是哪种 shell（如 Bash）并标明是可执行的 ASCII 文本，比如`sayhi.sh: Bourne-Again shell script, ASCII text executable`。
* 二进制可执行程序：file /usr/bin/ls，file 命令能够确定该程序编译时所面向的平台以及需要何种类型的库。如果有从未知来源处获得的二进制文件，那么这会是一个非常有用的特性，输出`/usr/bin/ls: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,for GNU/Linux 3.2.0,[...]`,解释如下：

** /usr/bin/ls:：指明被检测的文件路径。
** ELF：表示该文件采用的是 ELF（Executable and Linkable Format）格式，是 Linux 和其他类 UNIX 系统中常见的可执行文件格式。
** 64-bit：说明这是一个 64 位的程序，运行时需要 64 位操作系统。
** LSB：表示是 “Least Significant Byte first”，即小端字节序。这是 x86 架构的默认字节序。
** shared object：说明该可执行文件是“共享对象”，即虽然是可执行程序，但其构建方式类似于共享库，常用于支持动态链接，节省资源。
** x86-64：该程序是为 x86-64 架构（也称为 AMD64 或 Intel 64）编译的。
** version 1 (SYSV)：是 System V ABI 的版本，表示程序遵循 System V 接口规范，这是 Linux 系统通用的 ABI（应用二进制接口）规范。
** dynamically linked：说明该程序在运行时依赖于外部共享库，而不是将所有代码都编译进本体中。
** interpreter /lib64/ld-linux-x86-64.so.2：这个解释器路径告诉内核，当加载此程序时，使用哪个动态链接器来解析和加载所需的共享库。
** for GNU/Linux 3.2.0：表示该程序是为 Linux 内核版本 3.2.0 及以上版本编译的。

该输出告诉我们：/usr/bin/ls 是一个为 64 位 Linux 系统上的 x86-64 架构编译的动态链接 ELF 可执行程序，它依赖系统提供的共享库，并使用 /lib64/ld-linux-x86-64.so.2 作为动态链接器进行加载，符合 System V ABI 规范。这样的结构设计有助于内存共享、文件尺寸减小和库的复用。

!! ''cat（这里只指出查看文件内容的用法）''

cat 命令用于查看文件内容、创建文件、将多个文件合并输出，或进行重定向写入。其工作原理非常直接：读取文件内容后将其写到标准输出（通常是终端），或通过重定向写入另一个文件。

这里只指出其查看文件内容的用法：

* cat 文件名：直接在终端中显示文件的内容。
* cat 文件名1 文件名2 文件名3：一次查看多个文件，会依次输出两个文件的内容，彼此间不会自动加换行。

!!! ''选项''

!!!! ''-n''

-n 选项会给所有的行加上行号，包括空行。

* cat -n 文件名

!!!! ''-b''

-b 选项会给有文本的行加上行号，不包括空行。

* cat -b 文件名

!! ''more''

对大文件来说，cat 命令输出的文件内容会在屏幕上一闪而过。其开始运行之后你无法控制后续操作。为了解决这个问题，开发人员编写了 more 命令。

more 命令会显示文本文件的内容，但会在显示每页数据之后暂停下来（逐屏查看文本文件内容，当文件内容超过一屏时，more 会暂停显示，等待用户操作）。

* more 文件名

more 命令输出时，屏幕底部会显示一个标签 `--More--(29%)`，说明你仍然处于 more 应用程序中，以及当前在文本文件中所处的位置。这是more命令的提示符。

more 命令是一个分页工具，常用按键操作如下：

* 空格键（Space）：向下翻一页
* Enter：向下翻一行
* b：向上翻一页（并不是所有系统都支持）
* q：退出
* /字符串：搜索字符串（正则匹配）
* n：跳转到下一个匹配
* h：查看帮助

特点：

* 只能向前浏览，不能回滚（less 则可以前后浏览）
* 在长文本文件、系统日志、配置文件阅读中非常常见

!! ''less''

less 命令是 more 命令的升级版本（less is more）。常用于在终端中交互式查看大型文本文件，支持双向滚动、搜索、跳转、标记等功能，比 more 更灵活。

less 命令还可以在完成整个文件的读取之前显示文件的内容。cat命令和more命令则无法做到这一点。

less通常为手册页（比如 man 命令、git log 等很多工具）提供分页服务。你对 less 了解得越多，阅读各种命令手册页的时候就越得心应手。

* less 文件名

less 命令也是一个分页工具，常用操作键：

* Space：向下翻页
* b：向上翻页
* Enter：向下翻一行
* q：退出
* /pattern：向下搜索模式
* ?pattern：向上搜索模式
* n / N：重复上次搜索（正/反方向）
* g：跳到文件开头
* G：跳到文件结尾
* :n / :p：查看下一个或上一个文件（当一次打开多个文件时）
* v：调用默认编辑器（通常是 vi）编辑当前文件

特点：

* 支持前后滚动浏览（more 只能前进）
* 不需要一次性读入整个文件，适合查看超大文件
* 自动检测文件类型并以合适方式显示内容
* 支持颜色高亮（如果内容带颜色标记）

!! ''tail''

tail 命令用于查看文件的末尾内容，常用于日志监控、输出验证、数据流追踪等场景。默认显示文件最后 10 行内容。

* tail 文件名

!!! ''选项''

!!!！''-n''

* tail -n N 文件名：显示最后 N 行，如 tail -n 20 file.txt，显示 file.txt 的最后 20 行。

!!!！''-f''

-f 选项允许你在其他进程使用此文件时查看文件的内容。tail 命令会保持活动状态并持续地显示添加到文件中的内容。这是实时监测系统日志的绝佳方式。

* tail -f 文件名：持续输出文件新增的内容（常用于日志实时监控）

!! ''head''

head 命令用于查看文件开头的内容，默认显示前 10 行，常用于快速预览文件内容、脚本开头、数据文件字段等。

* head 文件名

!!! ''选项''

!!!! ''-n''

* head -n N 文件名：显示文件开头的 N 行，比如 head -n 20 file.txt，显示 file.txt 开头的 20 行。

文件的开头部分通常不会改变，因此 head 命令并没有 tail 命令那样的 -f 选项。head 命令是一种查看文件起始部分内容的便捷方法。