created: 20250515191140495
modified: 20250515194205808
tags: 计算机科学/操作系统与虚拟化/Linux/知识体系
title: 计算机科学/操作系统与虚拟化/Linux/知识体系/数据排序

!! ''sort''

sort 命令用于将文本内容进行排序处理。它是 Linux 和类 Unix 系统中处理文本行顺序的重要工具，主要对一行一行的文本进行排序，不修改每一行内部的内容。

sort 的核心任务就是将输入的多行文本，按照某种规则（默认是字典序）进行排序，并将结果输出。它可以：

* 从文件读取内容进行排序
* 从标准输入读取内容进行排序（例如管道输入）
* 支持多文件输入，会将多个文件的内容合并后一起排序

* sort 文件名：对一个文件进行排序
* sort 文件名1 文件名2：对多个文件进行排序
* 标准输入 | sort：从标准输入读取

例子：

* sort myfile.txt：将 myfile.txt 中的所有行按默认的字典序排序，并输出到标准输出。
* sort a.txt b.txt：把 a.txt 和 b.txt 的内容合并起来，然后统一进行排序。输出结果是整体排序后的行。
* cat myfile.txt | sort：这里 sort 没有提供参数，它会从标准输入中读取内容，也就是 cat 输出的内容。

默认情况下，sort 的输出是打印到标准输出（通常是终端），不会修改原文件。如果你希望排序结果写回文件，常见的做法是使用重定向或 -o 选项。

* sort myfile.txt > sorted.txt

排序内容的基本逻辑：sort 是以行为单位进行排序，也就是说，它按照每一行的内容比较大小。比较通常从第一字符开始，依次比较字符大小（ASCII 值），直到某一行“更小”或“更大”为止。

* 所以，哪怕一行很长，sort 也只会看字符先后顺序，不会去理解“句子”或“含义”。
* 不考虑语言语义，不考虑整段文本，而是逐行比较。

!!! ''选项''

!!!! ''-n''

-n 表示按照“数字大小”进行排序，而不是默认的“字典序”。

不加 -n 时，sort 是按字符逐个比较的字典序排序的。

数字识别方式说明：

* sort -n 会把每行开头连续的数字识别出来参与比较
* 若一行中开头不是数字，可能会被视为 0 或直接比作非数字（具体依赖实现）

例子：若 input.txt 内容如下：

```
2
10
1
```

sort 默认输出是：

```
1
10
2
```

因为在字符比较中，1 开头的 10 比 2 小。

sort -n 输出是：

```
1
2
10
```

这是按数字值从小到大排序，-n 告诉 sort 把每一行的内容看作一个数字，再比较大小。

数字识别方式的案例：

```
5 apples
12 bananas
3 oranges
```

sort -n 会得到：

```
3 oranges
5 apples
12 bananas
```

!!!! ''-M''

-M 是按月份名称对行进行排序。它会把每一行开头的三字母月份名（如 Jan, Feb, ..., Dec）识别出来，按公历的月份顺序排序。

sort -M 使用如下顺序进行排序：

* Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < Oct < Nov < Dec

注意：

* 每一行的开头必须是英文月份的缩写形式（前三个字母，首字母大写），例如 Feb。
* 若行首不是有效的月份名，排序结果可能不确定或将其视为最小或最大。
* 仅根据每行第一个词（通过空白字符（如空格、制表符 Tab）来分割单词）是否是月份缩写来决定顺序，后续内容不影响。

!!!! ''-k''

-k 用于指定按哪一列（字段）进行排序。它让你精确控制排序的“关键字”，即排序时参考哪一部分内容。-k 后面的参数是“字段位置”，语法为：

* sort -k m,n

** 从第 m 个字段开始作为排序关键字
** 到第 n 个字段结束为止（包括 n）
** 如果省略 ,n，就是只按第 m 个字段排序。

字段的含义：字段是由空白字符（一个或多个空格、Tab）分隔的文本单元。默认情况下，sort 会将每行拆成若干字段，从左到右依次编号，第一个字段为 1，第二个字段为 2，依此类推。

示例 1：按第二列排序

假设文件内容如下：

```
apple 3
banana 1
orange 2
```

使用命令：

```
sort -k 2 file.txt
```

结果：

```
banana 1
orange 2
apple 3
```

此处 -k 2 指定按第二列排序。

示例 2：按第二到第三列组成的关键字排序

```
a 3 z
a 2 y
a 2 x
```

命令：

```
sort -k2,3
```

此时，排序关键字是第 2 列开始，到第 3 列结束，也就是同时考虑第二列和第三列，结果：

```
a 2 x
a 2 y
a 3 z
```

注意事项

* 如果不加其他选项（如 -n 或 -r），sort 是按字典序排序。
* -k 后的数字是字段编号，不是字符位置。
* 字段分隔符默认是空白字符（可通过 -t 改变，如使用 -t ',' 指定逗号分隔）。

总结：

sort -k 是用于控制排序的起止字段，适用于有结构的数据排序，特别是多字段组合排序。它提供了比默认排序更细致的控制能力。

!!!! ''-t''

-t 用于指定字段分隔符。默认情况下，sort 使用任意数量的空格或 Tab 作为字段分隔符，但如果你的文本文件使用的是其他字符（如逗号、冒号、短横线等）作为字段间隔，就需要用 -t 指定正确的分隔符，才能使 -k 精准地选中字段。

* sort -t '分隔符' -k m,n 文件
** -t 后紧跟一个字符，指定字段的分隔符
** 搭配 -k 使用时，sort 会按该分隔符划分字段，并据此排序

示例：用冒号作为分隔符

文件 file.txt 内容如下：

```
user1:100
user3:300
user2:200
```

如果你要按冒号后的数字排序，就需要用：

```
sort -t ':' -k2 file.txt
```

输出：

```
user1:100
user2:200
user3:300
```

注意：

* -t 改变的是字段划分规则
* 适用于字段之间用自定义字符分隔的文本
* 常配合 -k 使用，确保排序关键字准确
* -t 只接受一个字符作为分隔符，不能用多个字符。

!!!! ''-r''

-r 选项的作用是将排序结果反转，也就是说，默认从小到大的排序（升序），加上 -r 后变为从大到小（降序）。

* sort -r 文件名
** 这会把文件中所有行按字典序逆序排列。

与其他选项配合使用:

* 如果你用 -n 做数值排序，再加上 -r 就变成了从大到小的数值排序
* 如果你用 -k 2 指定按第二列排序，加上 -r 就会按第二列降序排列

注意：

* -r 不改变排序方式（字典序、数值等），只反转已有的排序结果
* 常与 -n、-k 等组合使用，实现更复杂的降序排序需求
* 本质上就是reverse 排序方向