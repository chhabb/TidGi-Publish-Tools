created: 20250324031841003
modified: 20250324034617505
tags: 输出/前端面试题/JavaScript
title: 输出/前端面试题/JavaScript/事件循环机制

JS 是单线程的，但是浏览器是多线程的。

浏览器除了 JS 引擎线程（主线程），还有 GUI 线程，及其他辅助分线程：定时器触发线程、事件触发线程和网络请求线程等。

事件循环是 JS 实现异步任务调度的核心机制，由三部分组成： 

* 所有任务（同步/异步）都在主线程上执行，形成一个''执行栈''。
* 用于存储待执行异步回调的任务队列（宏任务队列与微任务队列）
* 结合其他辅助分线程结合运作的管理模块：
** 定时器管理模块 
** DOM 事件管理模块
** Ajax 请求管理模块

''执行流程：''

* 在执行栈中执行初始化同步代码（script 标签）
* 执行过程中如果有启动异步任务，交给对应的管理模块处理，管理模块会在后面特定时间，将回调函数放入任务队列中待执行
* 每次同步代码执行完毕后，事件循环会检查微任务队列并执行所有微任务，之后取出一个宏任务执行，再继续检查微任务队列，如此循环。

''宏任务与微任务：''

宏任务 

* script(整体代码)
* setTimeout / setInterval,
* Ajax
* DOM 事件监听
* postMessage (H5, 向其它窗口分发异步消息)
* setImmediate(Node.js 环境)

微任务 

* Promise
* async & await
* mutationObserver(H5, 监视 DOM 元素变化)

''细节''

执行微任务时：

* 新产生的微任务会立即加入微任务队列，并在当次事件循环中按顺序依次执行。
* 新产生的宏任务会加入宏任务队列，等待当前微任务队列清空后，按宏任务队列顺序执行。

执行宏任务时：

* 新产生的微任务会立即加入微任务队列，当前宏任务执行完成后，按微任务队列顺序依次执行。
* 新产生的宏任务会加入宏任务队列，当前宏任务执行完成且微任务队列清空后，按宏任务队列顺序依次执行。

''总结''

* 微任务优先级高：无论何时产生新的微任务，都会在当前宏任务执行完成后立即被处理。
* 宏任务按顺序排队：新产生的宏任务会被加入宏任务队列，等待当前宏任务和微任务队列清空后按 FIFO 顺序执行。